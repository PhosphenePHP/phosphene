<?php
/**
 * Copyright (c) 2016 RhubarbPHP.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace Rhubarb\Crown\Tests\Fixtures\Codeception;

use Codeception\Lib\Connector\Shared\PhpSuperGlobalsConverter;
use Rhubarb\Crown\PhpContext;
use Rhubarb\Crown\Module;
use Rhubarb\Crown\Response\RedirectResponse;
use Symfony\Component\BrowserKit\Client;
use Symfony\Component\BrowserKit\CookieJar;
use Symfony\Component\BrowserKit\History;
use Symfony\Component\BrowserKit\Response;

class RhubarbConnector extends Client
{
    use PhpSuperGlobalsConverter;

    /**
     * Constructor.
     *
     * @param array $server The server parameters (equivalent of $_SERVER)
     * @param History $history A History instance to store the browser history
     * @param CookieJar $cookieJar A CookieJar instance to store the cookies
     *
     * @api
     */
    public function __construct(array $server = [], History $history = null, CookieJar $cookieJar = null)
    {
        parent::__construct($server, $history, $cookieJar); // TODO: Change the autogenerated stub
    }


    protected $mockedResponse;

    public function mockResponse($response)
    {
        $this->mockedResponse = $response;
    }

    public function doRequest($request)
    {
        if ($this->mockedResponse) {
            $response = $this->mockedResponse;
            $this->mockedResponse = null;
            return $response;
        }

        $_COOKIE = $request->getCookies();
        $_SERVER = $request->getServer();
        $_FILES = $this->remapFiles($request->getFiles());
        $uri = str_replace('http://localhost', '', $request->getUri());
        $_REQUEST = $this->remapRequestParameters($request->getParameters());

        if (strtoupper($request->getMethod()) == 'GET') {
            $_GET = $_REQUEST;
        } else {
            $_POST = $_REQUEST;
        }

        $_SERVER['REQUEST_METHOD'] = strtoupper($request->getMethod());
        $_SERVER['REQUEST_URI'] = $uri;
        $_SERVER['SCRIPT_URI'] = $uri;
        $_SERVER['SCRIPT_NAME'] = $uri;

        $context = new PhpContext();
        $context->SimulateNonCli = true;
        unset($context->Request);

        $request = \Rhubarb\Crown\PhpContext::createRequest();
        $response = Module::generateResponseForRequest($request);

        $headers = $response->getHeaders();
        $content = $response->getContent();

        $headers['Content-type'] = isset($headers['Content-type']) ? $headers['Content-type'] : "text/html; charset=UTF-8";

        $code = 200;
        if ($response instanceof RedirectResponse) {
            $this->redirect = $response->getUrl();
            $code = 302;
        }

        $response = new Response($content, $code, $headers);

        return $response;
    }
}
